{
  "systemPrompt": "You are working on wp-migrate.sh, a WordPress migration bash script that pushes wp-content and database exports from source to destination servers.\n\nCRITICAL WORKFLOW ENFORCEMENT:\nBefore ANY git operation (branch, commit, push, PR), you MUST:\n1. Ask the user: 'Are you working on v1.x.x maintenance (main) or v2.0.0 development (v2)?'\n2. Read and reference the appropriate workflow (workflow_v1 or workflow_v2) from this settings file\n3. State which workflow step you're executing (e.g., 'V1 Step 7: Pushing feature branch to main')\n4. Verify branch naming matches target (v2-* branches MUST target v2, others target main)\n5. Check the project follows ShellCheck standards (script is currently ShellCheck-clean)\n\nIf you cannot confirm all 5 items above, STOP and ask the user for clarification.\n\nIMPORTANT: Before starting ANY work, ALWAYS:\n- Ask which version (v1 or v2) the user wants to work on\n- Read project documentation (README.md, CHANGELOG.md)\n- Understand the full scope before making changes\n- Follow the correct workflow for the target version\n\nKey Requirements:\n- v1 work: branch from main ‚Üí PR to main (production stable)\n- v2 work: branch from v2 ‚Üí PR to v2 (major refactor, NOT ready for production)\n- NEVER merge v2-* branches directly to main\n- NEVER push directly to main or v2 - ALL merges via GitHub PRs\n- Update CHANGELOG.md in [Unreleased] section for ALL changes (both v1 and v2)\n- Maintain ShellCheck-clean code\n- Use conventional commit messages (feat:, fix:, test:, docs:, chore:, refactor:)",

  "versionContext": {
    "description": "ALWAYS ask user at session start: 'Working on v1 or v2?'",
    "v1": {
      "branch": "main",
      "purpose": "Production stable releases (v1.x.x)",
      "status": "Active maintenance - bug fixes and minor features only",
      "releases": "Tagged and released immediately after merge",
      "userFacing": true
    },
    "v2": {
      "branch": "v2",
      "purpose": "Major refactor: modularize codebase, add build system",
      "status": "Development in progress - NOT production ready",
      "releases": "No releases until v2 branch merges to main",
      "userFacing": false,
      "warning": "v2-* branches must NEVER be merged directly to main"
    }
  },

  "customInstructions": {
    "beforeStarting": [
      "üö® CRITICAL: Ask user 'Are you working on v1 (main) or v2 (v2 branch)?'",
      "Read project documentation (README.md, CHANGELOG.md)",
      "Verify you're on the correct branch (main for v1, v2 for v2)",
      "Understand the full scope before making changes",
      "Review bash best practices and security (script uses set -Eeuo pipefail)"
    ],
    "whileCoding": [
      "Validate ALL user inputs and command-line arguments",
      "Follow bash best practices (proper quoting, error handling)",
      "Maintain ShellCheck-clean code (no warnings)",
      "Ensure code follows existing script style",
      "Preserve set -Eeuo pipefail safety flags",
      "Test with real WordPress installations when possible"
    ],
    "beforeCommitting": [
      "Confirm you're on the correct workflow (v1 or v2)",
      "Test script with --dry-run mode",
      "Run shellcheck wp-migrate.sh (must pass with no warnings)",
      "Update CHANGELOG.md in [Unreleased] section",
      "Verify changes don't break existing functionality",
      "Review code for security issues (SSH, file operations, DB handling)"
    ],

    "workflow_v1": {
      "description": "For v1.x.x maintenance - bug fixes and minor features",
      "baseBranch": "main",
      "steps": [
        "1. git checkout main && git pull --rebase origin main",
        "2. git checkout -b <type>/<descriptive-slug>  (e.g., fix/url-validation)",
        "3. Make changes and test with --dry-run",
        "4. Run shellcheck wp-migrate.sh",
        "5. Update CHANGELOG.md [Unreleased] section",
        "6. git add -A && git commit -m 'type: description'",
        "7. BEFORE pushing: git fetch origin main && check if main has new commits (git log HEAD..origin/main)",
        "8. IF main has new commits: git merge origin/main, resolve conflicts, git commit",
        "9. git push origin <branch-name>",
        "10. Open PR to main (TARGET: main, NOT v2)",
        "11. After merge, delete feature branch locally and remotely",
        "12. User decides if release is needed (you ask, don't assume)"
      ],
      "branchPrefixes": ["fix/", "feature/", "chore/", "docs/"],
      "prTarget": "main",
      "examples": [
        "fix/maintenance-mode-cleanup ‚Üí PR to main ‚Üí v1.1.9 release",
        "feature/add-retry-logic ‚Üí PR to main ‚Üí v1.2.0 release"
      ]
    },

    "workflow_v2": {
      "description": "For v2.0.0 development - major refactor and new architecture",
      "baseBranch": "v2",
      "steps": [
        "1. git checkout v2 && git pull --rebase origin v2",
        "2. git checkout -b v2-<type>/<descriptive-slug>  (e.g., v2-feature/modularize)",
        "3. Make changes and test with --dry-run (if applicable)",
        "4. Run shellcheck on affected files",
        "5. Update CHANGELOG.md [Unreleased] section (note it's for v2)",
        "6. git add -A && git commit -m 'type: description'",
        "7. BEFORE pushing: git fetch origin v2 && check if v2 has new commits (git log HEAD..origin/v2)",
        "8. IF v2 has new commits: git merge origin/v2, resolve conflicts, make build, git commit",
        "9. git push origin <branch-name>",
        "10. Open PR to v2 branch (TARGET: v2, NOT main) ‚ö†Ô∏è",
        "11. After merge, delete feature branch locally and remotely",
        "12. NO releases until v2 branch is complete and merged to main"
      ],
      "branchPrefixes": ["v2-feature/", "v2-fix/", "v2-chore/", "v2-refactor/", "v2-test/"],
      "prTarget": "v2",
      "warning": "‚ö†Ô∏è NEVER create PR from v2-* branches to main. Always target v2 branch.",
      "examples": [
        "v2-feature/modularize-core ‚Üí PR to v2 (NOT main)",
        "v2-refactor/build-system ‚Üí PR to v2 (NOT main)",
        "v2-fix/shellcheck-errors ‚Üí PR to v2 (NOT main)"
      ]
    },

    "multiPrStrategy": {
      "note": "When multiple PRs are in flight (created but not yet merged):",
      "problem": "If PR A merges before PR B, PR B's branch is now out of date and may have conflicts",
      "prevention": [
        "BEFORE creating any PR: Check if base branch has new commits since branch creation",
        "BEFORE final push to PR: Sync with latest base branch",
        "AFTER any PR merges to base: Immediately sync all open PR branches with base"
      ],
      "v1_strategy": {
        "description": "For PRs targeting main branch",
        "onPrCreation": [
          "1. git fetch origin main",
          "2. Check: Are there commits on main since your branch was created?",
          "3. If yes: git merge origin/main (or rebase if no conflicts expected)",
          "4. Run make build && git add -A && git commit --amend --no-edit",
          "5. Then create PR"
        ],
        "whenAnotherPrMerges": [
          "1. git fetch origin main",
          "2. git merge origin/main (resolve any conflicts)",
          "3. Run make build to regenerate built files",
          "4. Run shellcheck to verify",
          "5. git add -A && git commit -m 'Merge latest main branch'",
          "6. git push"
        ]
      },
      "v2_strategy": {
        "description": "For PRs targeting v2 branch",
        "onPrCreation": [
          "1. git fetch origin v2",
          "2. Check: Are there commits on v2 since your branch was created?",
          "3. If yes: git merge origin/v2 (or rebase if no conflicts expected)",
          "4. Run make build && git add -A && git commit --amend --no-edit",
          "5. Then create PR"
        ],
        "whenAnotherPrMerges": [
          "1. git fetch origin v2",
          "2. git merge origin/v2 (resolve any conflicts)",
          "3. Run make build to regenerate built files",
          "4. Run shellcheck to verify",
          "5. git add -A && git commit -m 'Merge latest v2 branch'",
          "6. git push"
        ]
      },
      "cross_version": "Keep v1 and v2 PRs completely separate. Do NOT merge v2 work into v1.",
      "proactiveMonitoring": "After completing work on your PR but BEFORE pushing, ALWAYS run: git fetch origin <base-branch> && git log HEAD..origin/<base-branch> to check if base has moved ahead"
    },

    "branchTypes": {
      "v1_branches": {
        "feature/*": "New features for v1.x.x - PR to main",
        "fix/*": "Bug fixes for v1.x.x - PR to main",
        "docs/*": "Documentation updates - PR to main",
        "chore/*": "Maintenance tasks for v1.x.x - PR to main"
      },
      "v2_branches": {
        "v2-feature/*": "New features for v2.0.0 - PR to v2",
        "v2-fix/*": "Bug fixes during v2 development - PR to v2",
        "v2-refactor/*": "Code restructuring for v2.0.0 - PR to v2",
        "v2-chore/*": "Maintenance tasks for v2.0.0 - PR to v2",
        "v2-test/*": "Testing infrastructure for v2.0.0 - PR to v2"
      }
    }
  },

  "projectContext": {
    "stack": "Bash script (requires: wp-cli, rsync, ssh, gzip)",
    "testing": "Manual testing with --dry-run flag + ShellCheck linting",
    "deployment": "Direct usage - users download and run the script",
    "branches": {
      "main": {
        "purpose": "Production stable (v1.x.x releases)",
        "protection": "All merges via PR",
        "releases": "Immediate - tag after merge",
        "acceptsFrom": ["fix/*", "feature/*", "chore/*", "docs/*"]
      },
      "v2": {
        "purpose": "Development branch for v2.0.0 major refactor",
        "protection": "All merges via PR",
        "releases": "None until v2 merges to main",
        "acceptsFrom": ["v2-feature/*", "v2-fix/*", "v2-refactor/*", "v2-chore/*", "v2-test/*"],
        "warning": "‚ö†Ô∏è This branch will NOT merge to main until v2.0.0 is complete"
      }
    },
    "criticalFiles": [
      "README.md - Complete documentation and usage",
      "CHANGELOG.md - Keep a Changelog format (track both v1 and v2 changes)",
      "wp-migrate.sh - Main script (v1 on main, v2 on v2 branch)",
      ".gitmessage - Commit message template",
      ".github/pull_request_template.md - PR checklist"
    ],
    "testCommand": "shellcheck wp-migrate.sh && ./wp-migrate.sh --help"
  },

  "prTargetValidation": {
    "description": "Dual-branch workflow - validate PR targets carefully",
    "rules": {
      "fix/*": "main",
      "feature/*": "main",
      "chore/*": "main",
      "docs/*": "main",
      "v2-feature/*": "v2",
      "v2-fix/*": "v2",
      "v2-refactor/*": "v2",
      "v2-chore/*": "v2",
      "v2-test/*": "v2"
    },
    "forbidden": [
      "Direct pushes to main (always use PRs)",
      "Direct pushes to v2 (always use PRs)",
      "PRs from v2-* branches to main (MUST target v2 branch)",
      "PRs from non-v2 branches to v2 (MUST target main)"
    ],
    "validation": {
      "beforeCreatingPR": [
        "Check branch name prefix",
        "Verify target branch matches prefix (v2-* ‚Üí v2, others ‚Üí main)",
        "Confirm with user if uncertain",
        "State target branch explicitly: 'Creating PR from fix/bug to main' or 'Creating PR from v2-feature/x to v2'"
      ]
    }
  },

  "autoPrompts": {
    "description": "Automatic prompts after merge confirmations",
    "onMainMerge": "‚úÖ PR merged to main successfully (v1.x.x)\n‚úÖ Branch cleaned up\n\nüîç Next Steps:\n- This is a v1 change - should I create a release tag?\n- Update CHANGELOG.md to move [Unreleased] items to [X.X.X] for releases\n- Script is now available for users to download\n\nWould you like me to create a version tag and update CHANGELOG for release?",
    "onV2Merge": "‚úÖ PR merged to v2 successfully (v2.0.0 development)\n‚úÖ Branch cleaned up\n\nüîç Status:\n- This is v2 development work - NOT yet released to users\n- v2 branch continues development\n- NO release tags created (v2 is still in progress)\n\nContinue with more v2 work or switch to v1 maintenance?"
  },

  "securityChecklist": {
    "beforeEveryCommit": [
      "Input validation: Are command-line arguments properly validated?",
      "Command injection: Are SSH/rsync/wp commands properly quoted?",
      "Path traversal: Are file paths validated and sanitized?",
      "Error handling: Does the script abort on errors (set -e)?",
      "Sensitive data: Are credentials handled securely (no hardcoded passwords)?",
      "Dry-run safety: Does --dry-run truly prevent destructive operations?"
    ]
  },

  "commitMessageConventions": {
    "format": "<type>: <description>",
    "types": {
      "feat": "New feature",
      "fix": "Bug fix",
      "docs": "Documentation changes",
      "test": "Adding or updating tests",
      "refactor": "Code refactoring",
      "chore": "Maintenance tasks",
      "perf": "Performance improvements",
      "style": "Code style changes (formatting, etc.)"
    },
    "examples": {
      "v1": [
        "fix: prevent maintenance mode failure when wp-cli not found",
        "feat: add --retry flag for network operations",
        "docs: clarify --stellarsites flag usage"
      ],
      "v2": [
        "refactor: split wp-migrate.sh into modular source files",
        "feat: add Makefile build system",
        "test: add bats-core unit tests for core functions"
      ]
    }
  },

  "safetyReminders": {
    "beforeEveryGitOperation": [
      "üö® Did you ask the user: v1 or v2?",
      "üö® Does the branch name match the target? (v2-* ‚Üí v2, others ‚Üí main)",
      "üö® Are you following the correct workflow (workflow_v1 or workflow_v2)?",
      "üö® Will this PR target the correct branch?"
    ],
    "beforeCreatingPR": [
      "üö® CRITICAL: Has the base branch (main/v2) received new commits since I branched?",
      "üö® Run: git fetch origin <base> && git log HEAD..origin/<base>",
      "üö® If base has new commits: Merge them NOW before creating PR",
      "üö® This prevents merge conflicts and 'DIRTY' PR status"
    ],
    "whenPRBlocked": [
      "If GitHub shows 'DIRTY' or 'CONFLICTING' status:",
      "1. Another PR merged after yours was created",
      "2. Your branch is out of date with base branch",
      "3. Solution: git merge origin/<base>, resolve conflicts, rebuild, push",
      "4. This creates a merge commit bringing both features together"
    ],
    "commonMistakes": [
      "‚ùå Creating PR from v2-feature/* to main (should be to v2)",
      "‚ùå Creating PR from fix/* to v2 (should be to main)",
      "‚ùå Forgetting to ask user which version they're working on",
      "‚ùå Using wrong branch prefix (fix/* when should be v2-fix/*)",
      "‚ùå NOT checking if base branch has new commits before creating PR",
      "‚ùå Ignoring that another PR was merged while working on yours"
    ]
  },

  "conflictPrevention": {
    "description": "How to prevent merge conflicts when multiple PRs are in flight",
    "scenario": "You're working on PR B. PR A merges to base branch before you finish.",
    "symptoms": [
      "GitHub shows PR as 'DIRTY' or 'CONFLICTING'",
      "Merge button is disabled",
      "Message: 'This branch is out-of-date with the base branch'"
    ],
    "solution": {
      "immediate": [
        "1. git fetch origin <base-branch>",
        "2. git merge origin/<base-branch>",
        "3. Resolve any conflicts (both sets of changes should coexist)",
        "4. For v2: Run 'make build' to regenerate wp-migrate.sh and checksum",
        "5. git add -A && git commit -m 'Merge latest <base> branch'",
        "6. git push",
        "7. GitHub will now show PR as 'CLEAN' and 'MERGEABLE'"
      ],
      "prevention": [
        "ALWAYS check before pushing: git fetch origin <base> && git log HEAD..origin/<base>",
        "If base has moved ahead: Merge it BEFORE pushing your final commit",
        "Monitor open PRs: When any PR merges, sync your branch immediately"
      ]
    },
    "conflictResolution": {
      "CHANGELOG.md": "Keep both entries - add incoming changes to appropriate section",
      "src/lib/functions.sh": "Merge help text - keep all new flags from both PRs",
      "wp-migrate.sh": "NEVER manually edit - always regenerate with 'make build'",
      "wp-migrate.sh.sha256": "NEVER manually edit - always regenerate with 'make build'",
      "principle": "Both features should coexist. Conflicts mean both PRs touched the same area - merge both sets of changes."
    }
  }
}
