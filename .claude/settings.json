{
  "systemPrompt": "You are working on wp-migrate.sh, a WordPress migration bash script that pushes wp-content and database exports from source to destination servers.\n\nüö® CRITICAL PR APPROVAL ENFORCEMENT üö®\n===========================================\nYOU MUST NEVER MERGE ANY PR WITHOUT EXPLICIT USER APPROVAL.\n\nWhen creating PRs:\n1. Create the PR with 'gh pr create'\n2. IMMEDIATELY STOP and tell user: 'PR #X created at <URL>. Please review and approve before merging.'\n3. WAIT for user to explicitly say 'merge it', 'approve and merge', or 'merge PR #X'\n4. ONLY THEN run 'gh pr merge <number>'\n\nDO NOT:\n- ‚ùå Create and merge PR in same response\n- ‚ùå Use 'gh pr create && gh pr merge' chained commands  \n- ‚ùå Assume user wants immediate merge\n- ‚ùå Merge because 'it looks ready'\n- ‚ùå Use '--auto' flag on gh pr merge\n\nBREAKING THIS RULE IS COMPLETELY UNACCEPTABLE.\nUSER MUST APPROVE EVERY PR BEFORE MERGE.\n===========================================\n\nCRITICAL WORKFLOW ENFORCEMENT:\nBefore ANY git operation (branch, commit, push, PR), you MUST:\n1. Read and reference the workflow from this settings file\n2. State which workflow step you're executing (e.g., 'Step 7: Pushing feature branch to main')\n3. Verify branch naming matches conventional prefixes (fix/, feature/, chore/, docs/, refactor/)\n4. Check the project follows ShellCheck standards (script is currently ShellCheck-clean)\n5. For modular source (src/): MUST run 'make build' after changes and commit both source + built files\n\nIf you cannot confirm all 5 items above, STOP and ask the user for clarification.\n\nIMPORTANT: Before starting ANY work, ALWAYS:\n- Read project documentation (README.md, CHANGELOG.md)\n- Understand the full scope before making changes\n- Follow the correct workflow\n\nKey Requirements:\n- All work: branch from main ‚Üí PR to main ‚Üí USER APPROVAL ‚Üí merge\n- NEVER push directly to main - ALL merges via GitHub PRs\n- NEVER merge PRs without explicit user approval (see PR APPROVAL ENFORCEMENT above)\n- For src/ changes: MUST run 'make build' before committing\n- Update CHANGELOG.md in [Unreleased] section for ALL changes\n- Maintain ShellCheck-clean code\n- Use conventional commit messages (feat:, fix:, test:, docs:, chore:, refactor:)",

  "projectContext": {
    "version": "v2.0.0+",
    "architecture": "Modular source with Makefile build system",
    "stack": "Bash script (requires: wp-cli, rsync, ssh, gzip)",
    "testing": "Manual testing with --dry-run flag + ShellCheck linting",
    "deployment": "Direct usage - users download single wp-migrate.sh file",
    "branches": {
      "main": {
        "purpose": "Production stable releases (v2.0.0+)",
        "structure": "Modular src/ + built wp-migrate.sh",
        "protection": "All merges via PR with Code Owner approval",
        "releases": "Immediate - tag after merge",
        "acceptsFrom": ["fix/*", "feature/*", "chore/*", "docs/*", "refactor/*"]
      },
      "v1-stable": {
        "purpose": "Archived v1.x codebase (historical reference)",
        "structure": "Single-file wp-migrate.sh (no src/ directory)",
        "status": "Read-only - no further development",
        "note": "Final v1 release was v1.1.8"
      }
    },
    "criticalFiles": [
      "README.md - Complete documentation and usage",
      "CHANGELOG.md - Keep a Changelog format",
      "wp-migrate.sh - Built artifact (generated by 'make build')",
      "wp-migrate.sh.sha256 - Checksum (generated by 'make build')",
      "src/ - Modular source code (edit these, not wp-migrate.sh)",
      "Makefile - Build system",
      ".github/CODEOWNERS - Code ownership for PR approvals",
      ".githooks/pre-commit - Prevents committing without rebuild"
    ],
    "testCommand": "make test && ./wp-migrate.sh --help"
  },

  "buildSystem": {
    "description": "v2.0.0+ uses modular source code in src/ with Makefile build",
    "workflow": [
      "1. Edit files in src/ directory (NOT wp-migrate.sh directly)",
      "2. Run 'make build' to regenerate wp-migrate.sh + sha256 checksum",
      "3. Run 'make test' to verify ShellCheck passes",
      "4. Commit BOTH source files (src/) AND built files (wp-migrate.sh, .sha256)",
      "5. Pre-commit hook will prevent committing if build is out of date"
    ],
    "makeTargets": {
      "make build": "Concatenate src/ files into wp-migrate.sh + generate checksum",
      "make test": "Run shellcheck on built wp-migrate.sh",
      "make clean": "Remove build artifacts (for testing)",
      "make help": "Show available targets"
    },
    "sourceStructure": {
      "src/header.sh": "Shebang, set flags, default variables",
      "src/lib/core.sh": "Core utilities (log, err, validate_url)",
      "src/lib/adapters/": "Archive format adapters (extensible system)",
      "src/lib/functions.sh": "All other functions",
      "src/main.sh": "Argument parsing and main execution"
    },
    "buildOrder": "header ‚Üí core ‚Üí adapters ‚Üí functions ‚Üí main",
    "warnings": [
      "‚ö†Ô∏è NEVER edit wp-migrate.sh directly (it's generated)",
      "‚ö†Ô∏è NEVER edit wp-migrate.sh.sha256 directly (it's generated)",
      "‚ö†Ô∏è ALWAYS run 'make build' after editing src/ files",
      "‚ö†Ô∏è ALWAYS commit both src/ changes AND built files together"
    ]
  },

  "adapterContributions": {
    "description": "v2.0.0 introduced extensible archive adapter system for backup formats",
    "currentAdapters": ["duplicator"],
    "futureAdapters": ["jetpack", "updraftplus", "backwpup", "all-in-one-wp-migration"],
    "addingNewAdapter": [
      "1. Read src/lib/adapters/README.md (comprehensive contributor guide)",
      "2. Create new adapter file: src/lib/adapters/<format>.sh",
      "3. Implement required functions (see base.sh for helpers):",
      "   - detect_<format>_archive() - Format detection logic",
      "   - validate_<format>_archive() - Archive validation",
      "   - extract_<format>_archive() - Extraction to temp directory",
      "   - find_<format>_database() - Locate SQL dump",
      "   - find_<format>_wp_content() - Locate wp-content directory",
      "4. Update Makefile to include new adapter in build",
      "5. Add tests and documentation",
      "6. Submit PR (see workflow below)"
    ],
    "adapterInterface": "See src/lib/adapters/README.md for complete specification"
  },

  "workflow": {
    "description": "Standard workflow for all contributions (v2.0.0+)",
    "baseBranch": "main",
    "steps": [
      "1. git checkout main && git pull --rebase origin main",
      "2. git checkout -b <type>/<descriptive-slug>  (e.g., fix/url-validation, feature/jetpack-adapter)",
      "3. Make changes in src/ directory (for code changes)",
      "4. Run 'make build' to regenerate wp-migrate.sh",
      "5. Run 'make test' to verify ShellCheck passes",
      "6. Update CHANGELOG.md [Unreleased] section",
      "7. git add -A && git commit -m 'type: description'",
      "8. BEFORE pushing: git fetch origin main && check if main has new commits (git log HEAD..origin/main)",
      "9. IF main has new commits: git merge origin/main, resolve conflicts, make build, git commit",
      "10. git push origin <branch-name>",
      "11. Create PR to main with 'gh pr create'",
      "12. STOP and tell user: 'PR #X created at <URL>. Please review and approve before merging.'",
      "13. WAIT FOR USER APPROVAL - do not merge",
      "14. After user approves: gh pr merge <number>",
      "15. Delete feature branch: git branch -d <branch-name> && git push origin --delete <branch-name>"
    ],
    "branchPrefixes": ["fix/", "feature/", "chore/", "docs/", "refactor/", "test/"],
    "prTarget": "main",
    "prApprovalRequired": "YES - NEVER MERGE WITHOUT USER APPROVAL",
    "examples": [
      "fix/maintenance-mode-cleanup ‚Üí PR to main ‚Üí USER APPROVES ‚Üí merge ‚Üí release",
      "feature/jetpack-adapter ‚Üí PR to main ‚Üí USER APPROVES ‚Üí merge ‚Üí release"
    ]
  },

  "multiPrStrategy": {
    "note": "When multiple PRs are in flight (created but not yet merged):",
    "problem": "If PR A merges before PR B, PR B's branch is now out of date and may have conflicts",
    "prevention": [
      "BEFORE creating any PR: Check if base branch has new commits since branch creation",
      "BEFORE final push to PR: Sync with latest base branch",
      "AFTER any PR merges to base: Immediately sync all open PR branches with base"
    ],
    "strategy": {
      "description": "For PRs targeting main branch",
      "onPrCreation": [
        "1. git fetch origin main",
        "2. Check: Are there commits on main since your branch was created?",
        "3. If yes: git merge origin/main (or rebase if no conflicts expected)",
        "4. Run make build && git add -A && git commit --amend --no-edit",
        "5. Then create PR"
      ],
      "whenAnotherPrMerges": [
        "1. git fetch origin main",
        "2. git merge origin/main (resolve any conflicts)",
        "3. Run make build to regenerate built files",
        "4. Run make test to verify",
        "5. git add -A && git commit -m 'Merge latest main branch'",
        "6. git push"
      ]
    },
    "proactiveMonitoring": "After completing work on your PR but BEFORE pushing, ALWAYS run: git fetch origin main && git log HEAD..origin/main to check if main has moved ahead"
  },

  "releaseProcess": {
    "description": "Semantic versioning with GitHub releases",
    "versioning": {
      "major": "Breaking changes (e.g., v1.x.x ‚Üí v2.0.0)",
      "minor": "New features, backward compatible (e.g., v2.0.0 ‚Üí v2.1.0)",
      "patch": "Bug fixes (e.g., v2.1.0 ‚Üí v2.1.1)"
    },
    "steps": [
      "1. Update CHANGELOG.md: Move [Unreleased] items to [X.Y.Z] with date",
      "2. git add CHANGELOG.md && git commit -m 'chore: release vX.Y.Z'",
      "3. git push origin main",
      "4. git tag vX.Y.Z -a -m 'vX.Y.Z - Brief description'",
      "5. git push origin vX.Y.Z",
      "6. gh release create vX.Y.Z --title 'vX.Y.Z - Title' --notes-file RELEASE_NOTES.md"
    ],
    "releaseNotes": "Include: summary, breaking changes (if any), new features, bug fixes, upgrade guide",
    "changelogFormat": "Keep a Changelog (https://keepachangelog.com)"
  },

  "securityChecklist": {
    "beforeEveryCommit": [
      "Input validation: Are command-line arguments properly validated?",
      "Command injection: Are SSH/rsync/wp commands properly quoted?",
      "Path traversal: Are file paths validated and sanitized?",
      "Error handling: Does the script abort on errors (set -e)?",
      "Sensitive data: Are credentials handled securely (no hardcoded passwords)?",
      "Dry-run safety: Does --dry-run truly prevent destructive operations?"
    ]
  },

  "commitMessageConventions": {
    "format": "<type>: <description>",
    "types": {
      "feat": "New feature",
      "fix": "Bug fix",
      "docs": "Documentation changes",
      "test": "Adding or updating tests",
      "refactor": "Code refactoring",
      "chore": "Maintenance tasks",
      "perf": "Performance improvements",
      "style": "Code style changes (formatting, etc.)"
    },
    "examples": [
      "fix: prevent maintenance mode failure when wp-cli not found",
      "feat: add Jetpack Backup adapter",
      "docs: update README with adapter contribution guide",
      "refactor: extract common adapter logic to base.sh"
    ]
  },

  "safetyReminders": {
    "beforeEveryGitOperation": [
      "üö® Are you following the workflow from this settings file?",
      "üö® Does the branch name use conventional prefix (fix/, feature/, etc.)?",
      "üö® For src/ changes: Did you run 'make build'?",
      "üö® Will this PR target main branch?"
    ],
    "beforeCreatingPR": [
      "üö® CRITICAL: Has main received new commits since I branched?",
      "üö® Run: git fetch origin main && git log HEAD..origin/main",
      "üö® If main has new commits: Merge them NOW before creating PR",
      "üö® This prevents merge conflicts and 'DIRTY' PR status",
      "üö® REMEMBER: After creating PR, STOP and WAIT for user approval"
    ],
    "afterCreatingPR": [
      "üö® DO NOT MERGE - Tell user: 'PR #X created at <URL>. Please review and approve before merging.'",
      "üö® WAIT for explicit user approval",
      "üö® User must say 'merge it', 'approve and merge', or similar",
      "üö® NEVER merge on your own initiative"
    ],
    "whenPRBlocked": [
      "If GitHub shows 'DIRTY' or 'CONFLICTING' status:",
      "1. Another PR merged after yours was created",
      "2. Your branch is out of date with main",
      "3. Solution: git merge origin/main, resolve conflicts, make build, git add -A, git commit, git push",
      "4. This creates a merge commit bringing both features together"
    ],
    "commonMistakes": [
      "‚ùå Editing wp-migrate.sh directly instead of src/ files",
      "‚ùå Forgetting to run 'make build' after src/ changes",
      "‚ùå Committing src/ changes without also committing built files",
      "‚ùå Creating and merging PR without user approval (CRITICAL ERROR)",
      "‚ùå NOT checking if main has new commits before creating PR",
      "‚ùå Ignoring that another PR was merged while working on yours"
    ]
  },

  "conflictPrevention": {
    "description": "How to prevent merge conflicts when multiple PRs are in flight",
    "scenario": "You're working on PR B. PR A merges to main before you finish.",
    "symptoms": [
      "GitHub shows PR as 'DIRTY' or 'CONFLICTING'",
      "Merge button is disabled",
      "Message: 'This branch is out-of-date with the base branch'"
    ],
    "solution": {
      "immediate": [
        "1. git fetch origin main",
        "2. git merge origin/main",
        "3. Resolve any conflicts (both sets of changes should coexist)",
        "4. Run 'make build' to regenerate wp-migrate.sh and checksum",
        "5. Run 'make test' to verify",
        "6. git add -A && git commit -m 'Merge latest main branch'",
        "7. git push",
        "8. GitHub will now show PR as 'CLEAN' and 'MERGEABLE'"
      ],
      "prevention": [
        "ALWAYS check before pushing: git fetch origin main && git log HEAD..origin/main",
        "If main has moved ahead: Merge it BEFORE pushing your final commit",
        "Monitor open PRs: When any PR merges, sync your branch immediately"
      ]
    },
    "conflictResolution": {
      "CHANGELOG.md": "Keep both entries - add incoming changes to appropriate section",
      "src/lib/functions.sh": "Merge help text - keep all new flags from both PRs",
      "wp-migrate.sh": "NEVER manually edit - always regenerate with 'make build'",
      "wp-migrate.sh.sha256": "NEVER manually edit - always regenerate with 'make build'",
      "principle": "Both features should coexist. Conflicts mean both PRs touched the same area - merge both sets of changes."
    }
  }
}
